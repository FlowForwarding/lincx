[
 {linc,
  [
   %% Following setting enables or disables OF-Config subsystem which consists
   %% of three applications: ssh, enetconf and of_config.
   %% Allowed values: 'enabled' | 'disabled'
   {of_config, enabled},

   %% Configure ports available to the switch when using the
   %% userspace backend according to your system setup.
   %% * Under Linux all TAP interfaces must be set up beforehand
   %%   as persistent.
   %% * Under MacOSX TAP interfaces are created during node
   %%   startup (which requires setting an ip parameter).
   %% Remember to set 'rate' option when you plan to assign queues
   %% to the given port.
   {capable_switch_ports,
    [
     %% Examples:
     %% - regular hardware interface with queues disabled
     %% {port, 1, [{interface, "eth0"}]},
     %% - regular hardware interface and port rate when queues enabled
     %% {port, 2, [{interface, "eth0"}, {port_rate, {100, kbps}}]},
     %% - hardware interface with explicit type and queues disabled
     %% {port, 3, [{interface, "net0"}, {type, eth}]},
     %% - regular tap interface with queues disabled
     %% {port, 4, [{interface, "tap0"}]},
     %% - tap interface under MacOSX with dynamically assigned IP
     %% {port, 5, [{interface, "tap1"}, {ip, "10.0.0.1"}]},
     %% - tap interface with explicit type and queues disabled
     %% {port, 6, [{interface, "net1"}, {type, tap}]}
    ]},

   {capable_switch_queues,
    [
     %% Examples:
     %% {queue, 1, [{min_rate, 100}, {max_rate, 100}]},
     %% {queue, 2, [{min_rate, 100}, {max_rate, 100}]}
    ]},

   %% Configuration of the logical switches.
   {logical_switches,
    [
     {switch, 0,
      [
       %% Configuration of switch backend implementation used by ofs_logic
       %% process.
       %% By default an Erlang userspace 1.3.1 implementation is selected.
       %% Allowed values: 'linc_us3' | 'linc_us4'
       {backend, linc_us4},

       %% Configuration of the controllers switch will connect to. Ideally
       %% this list should be empty and assignement should be handled by an
       %% OF-Config client.
       %% Default OFP controller port is 6633.
       {controllers,
        [
         %% {"Switch0-DefaultController", "localhost", 6633, tcp}

         %% To establish auxiliary connections to the controller specify them
         %% in the list of additional options. For example to start 2 tcp and one
         %% tls auxiliary connections provide config as follows:
         %% {"Switch0-DefaultController", "localhost", 6633, tcp,
         %%  [{auxiliary_connections, [{tcp, 2}, {tls, 1}]}]
         %% }
        ]},

       %% Enable or disable accepting connections from OFP controllers.
       %% The switch may optionally accept TCP connections from OFP controllers
       %% trying to connect to it.
       %% Allowed values: 'disabled' | '{BIND_ADDRESS, LISTENING_PORT, tcp}'
       %% Example:
       %% {controllers_listener, {"127.0.0.1", 6653, tcp}}
       {controllers_listener, disabled},

       %% Enable or disable queues subsystem. Queue configuration is not part
       %% of the OpenFlow specification and as such should be considered
       %% EXPERIMENTAL. This feature is disabled by default.
       %% Allowed values: 'enabled' | 'disabled'
       {queues_status, disabled},

       %% To assign a port to a logical switch two requirements has to be met:
       %%    a. the port has to be defined in the `capable_switch_ports`,
       %%    b. the port has to be listed in the `ports` for the logical switch.
       %%
       %% If queues are enabled, assign them to ports.
       %% Remember to set appropriate port rates in `capable_switch_ports`.
       %% Queue configuration is not part of the OpenFlow specification
       %% and as such should be considered EXPERIMENTAL.
       {ports, [
                %% Examples:
                %% - port without queues:
                %% {port, 1, {queues, []}},
                %% - port with two queues:
                %% {port, 2, {queues, [1, 2]}}
               ]}
      ]}

     %% Capable Switch context allows you to start multiple Logical Switches
     %% inside one instance of LINC.
     %% , {switch, 1,
     %%    [
     %%     {backend, linc_us3},
     %%     {controllers, []},
     %%     {ports, []},
     %%     {queues_status, disabled},
     %%    ]}
    ]}

   %% TLS configuration. Put your switch certificate and private RSA key here.
   %% Values should be base64 encoded, DER encoded strings.
   %% , {certificate, ""},
   %%   {rsa_private_key, ""}
  ]},

 {enetconf,
  [
   {capabilities, [{base, {1, 0}},
                   {base, {1, 1}},
                   {startup, {1, 0}},
                   {'writable-running', {1, 0}}]},
   {callback_module, linc_ofconfig},
   {sshd_ip, any},
   {sshd_port, 1830},
   {sshd_user_passwords,
    [
     {"linc", "linc"}
    ]}
  ]},

 {lager,
  [
   {handlers,
    [
     {lager_console_backend, info},
     {lager_file_backend,
      [
       {"log/error.log", error, 10485760, "$D0", 5},
       {"log/console.log", info, 10485760, "$D0", 5}
      ]}
    ]}
  ]},

 {sasl,
  [
   {sasl_error_logger, {file, "log/sasl-error.log"}},
   {errlog_type, error},
   {error_logger_mf_dir, "log/sasl"},      % Log directory
   {error_logger_mf_maxbytes, 10485760},   % 10 MB max file size
   {error_logger_mf_maxfiles, 5}           % 5 files max
  ]},

 {sync,
  %% Sync is a developer utility that reloads changed beam files into the VM
  %% without the need to restart it. It is started when the Makefile's dev
  %% target is invoked to start the development environment.
  [
   %% By default only the procket module is excluded from the scan process
   %% as it does not support reloading.
   {excluded_modules, [procket]}
  ]}
 
].
