#!/usr/bin/env escript

-include("../deps/of_protocol/include/ofp_v4.hrl").
-include("../apps/linc_max/include/linc_max.hrl").

main(_) ->
	gen_file(
		"apps/linc_max/include/fast_actions.hrl",
		fun(Dev) ->
			io:format(Dev, "-record(fast_actions, {\n", []),
			gen_record(Dev, ?ACTIONS_SCHEME),
			io:format(Dev, "}).\n\n", [])
		end
	),

	gen_file(
		"apps/linc_max/src/linc_max_action_set.erl",
		fun(Dev) ->
			io:format(Dev, "-module(linc_max_action_set).\n",[]),
			io:format(Dev, "-compile(export_all).\n\n",[]),

			io:format(Dev, "insert(Ins, undefined) -> Ins;\n",[]),
			io:format(Dev, "insert(Ins, Old) -> insert(Ins,Old,[]).\n\n",[]),
			io:format(Dev, "insert([], Old, New) -> rappend(New, Old);\n",[]),
			io:format(Dev, "insert([{_,N,_}|_]=In,Old,New) -> ?MODULE:N(In,Old,New);\n",[]),
			io:format(Dev, "insert([{N,_}|_]=In,Old,New) -> ?MODULE:N(In,Old,New);\n",[]),
			io:format(Dev, "insert([N|_]=In,Old,New) -> ?MODULE:N(In,Old,New).\n\n",[]),

			io:format(Dev, "rappend([], L) -> L;\n",[]),
			io:format(Dev, "rappend([H | T], L) -> rappend(T, [H | L]).\n\n",[]),

			io:format(Dev, "merge([A|Rest], Old, New) -> insert(Rest,Old,[A|New]).\n\n",[]),

			lists:foreach(
				fun
					({set,_Field,_Var,Set}) ->
						gen_insert(Dev,Set,Set,Set);
					(_) ->
						ok
				end,
				?ACTIONS_SCHEME
			)
		end
	),

	gen_file(
		"apps/linc_max/include/fast_actions_inl.hrl",
		fun(Dev) ->
			apply_clause(Dev,gen_args(?ACTIONS_SCHEME,[]))
		end
	).

gen_file(File, Gen) ->
	{ok, Dev} = file:open(File, [write]),
	io:format(Dev, "%% Autogenerated by ./scripts/fast_actions_gen\n\n", []),
	Gen(Dev),
	ok = file:close(Dev),
	io:format("Generated ~s\n", [File]).

gen_insert(_, [], _, _) ->
	ok;
gen_insert(Dev, [A|Rest1], [A|_Rest2], Acts) ->
	io:format(Dev, 
		"~s(A,[~s|Old],New) -> merge(A, Old, New);\n", 
		[name(A),match(A)]
	),
	io:format(Dev,
		"~s(A,Old,New) -> merge(A, Old, New).\n\n", 
		[name(A)]
	),
	gen_insert(Dev, Rest1, Acts, Acts);
gen_insert(Dev, [A|Rest1], [B|Rest2], Acts) ->
	io:format(Dev, 
		"~s(A,[~s=B|Old],New) -> ~s(A, Old, [B|New]);\n", 
		[name(A),match(B),name(A)]
	),
	gen_insert(Dev, [A|Rest1], Rest2, Acts).


name({_,N,_}) -> atom_to_list(N);
name({N,_}) -> atom_to_list(N);
name(N) -> atom_to_list(N).

match({set_field, Name, _}) ->
	"{set_field," ++ atom_to_list(Name) ++ ",_}";
match({A, _}) ->
	"{" ++ atom_to_list(A) ++ ",_}";
match(A) ->
	atom_to_list(A).

gen_record(Dev, [{_,Name,_,_} | []]) ->
	io:format(Dev, "\t~p\n", [Name]);
gen_record(Dev, [{_,Name,_,_} | Rest]) ->
	io:format(Dev, "\t~p,\n", [Name]),
	gen_record(Dev, Rest).

apply_clause(_,[]) ->
	ok;
apply_clause(Inl,[Args|[]]) ->
	io:format(Inl,"apply_set({_,~s},Frame,_Blaze) ->\n\t~s.\n\n", 
		[apply_args(Args,[]),apply_body(Args, "Frame")]);
apply_clause(Inl,[Args|Rest]) ->
	io:format(Inl,"apply_set({_,~s},Frame,_Blaze) ->\n\t~s;\n", 
		[apply_args(Args,[]),apply_body(Args, "Frame")]),
	apply_clause(Inl,Rest).

apply_args([A | []], Acc) ->
	Acc ++ var(A);
apply_args([A | Rest], Acc) ->
	apply_args(Rest, Acc ++ var(A) ++ ",").

var({_,_,Var,A}) when is_atom(A) ->
	"_" ++ atom_to_list(Var);
var({_,_,Var,_}) ->
	atom_to_list(Var);
var(undefined) ->
	"undefined".

apply_body([],Str) ->
	Str;
apply_body([undefined|Rest], Str) ->
	apply_body(Rest,Str);
apply_body([{action,_Field,Var,{set_field,Name,_}}|Rest],Str) ->
	apply_body(Rest,"set_field(" ++ Str ++ "," ++ atom_to_list(Name) ++ "," ++ atom_to_list(Var) ++ ")");
apply_body([{action,_Field,Var,{set_queue,_}}|Rest],Str) ->
	apply_body(Rest,"set_queue(" ++ Str ++ "," ++ atom_to_list(Var) ++ ",_Blaze)");
apply_body([{action,_Field,Var,{output,_}}|Rest],Str) ->
	apply_body(Rest,"output(" ++ Str ++ "," ++ atom_to_list(Var) ++ ",_Blaze)");
apply_body([{action,_Field,Var,{Name,_}}|Rest],Str) ->
	apply_body(Rest,atom_to_list(Name) ++ "(" ++ Str ++ "," ++ atom_to_list(Var) ++ ")");
apply_body([{action,_Field,_Var,Name}|Rest],Str) ->
	apply_body(Rest,atom_to_list(Name) ++ "(" ++ Str ++ ")");
apply_body([{set,_Field,Var,_Set}|Rest],Str) ->
	apply_body(Rest,"apply_subset(" ++ Str ++ "," ++ atom_to_list(Var) ++ ")").

gen_args([], Args) ->
	[lists:reverse(Args)];
gen_args([A|Rest], Args) ->
	gen_args(Rest,[undefined | Args]) ++ gen_args(Rest,[A | Args]).
