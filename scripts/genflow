#!/usr/bin/env escript
%%
%%

main([TabName]) ->
	random:seed(now()),
	FlowTab = list_to_atom(TabName),
	CurDir = filename:dirname(escript:script_name()),
	ConfFile = filename:join(CurDir, "genflow.conf"),
	{ok,Conf} = file:consult(ConfFile),
	case proplists:get_value(FlowTab, Conf) of
	undefined ->
		io:format("Error: ~s has no configuration for ~s\n", [ConfFile,TabName]),
		halt(1);
	TabConf ->
		Flows = generate(TabConf),
		TabFile = filename:join(["priv",TabName ++ ".tab"]),
		{ok,Out} = file:open(TabFile, [write]),
		io:format(Out, "%% autogenerated by ~s\n\n", [escript:script_name()]),
		lists:foreach(fun(F) ->
			io:format(Out, "~p.\n", [F])
		end, Flows),
		file:close(Out),
		io:format("~s generated\n", [TabFile])
	end.

generate(TabConf) ->
	generate(1, 2, TabConf) ++ generate(2, 1, TabConf).

generate(InPort, OutPort, TabConf) ->
	NumFlows = proplists:get_value(num_flows, TabConf, 100),
	Matches = proplists:get_all_values(match, TabConf),
	AllowArp = proplists:get_bool(allow_arp, TabConf),

	[{flow,[{in_port,InPort}]
				++ more_matches(Matches),no_instr()}
		|| _ <- lists:seq(1, NumFlows)]
	
		++ if AllowArp ->
			[{flow,[{in_port,InPort},{eth_type,16#806}],
				   forward_instr(OutPort)}];
			true -> [] end

		++ [{flow,[{in_port,InPort}],
				  forward_instr(OutPort)}].

no_instr() ->
	{instr,undefined,undefined,undefined,
		   undefined,undefined}.

forward_instr(OutPort) ->
	{instr,undefined,undefined,{write,[{output,OutPort}]},
		   undefined,undefined}.

more_matches(Matches) ->
	more_matches(Matches, []).

more_matches([], Acc) ->
	lists:reverse(Acc);
more_matches([{Prob,Fld}|Matches], Acc) ->
	Val = random:uniform(max_value(Fld)) -1,
	more_matches1(Prob, {Fld,Val}, Matches, Acc);
more_matches([{Prob,Fld,Mask}|Matches], Acc) ->
	Val = random:uniform(max_value(Fld)) -1,
	more_matches1(Prob, {Fld,unmask(Val, Mask),Mask}, Matches, Acc).

more_matches1(Prob, Spec, Matches, Acc) ->
	case random:uniform() < Prob of
	true ->
		more_matches(Matches, [Spec|Acc]);
	_ ->
		more_matches(Matches, Acc)
	end.

unmask(Val, nomask) -> Val;
unmask(Val, Mask) -> Val band Mask.

max_value(eth_dst) -> 16#1000000000000;
max_value(ip_dscp) -> 2#1000000;
max_value(vlan_vid) -> 16#1000.

%%EOF
